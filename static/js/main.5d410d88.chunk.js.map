{"version":3,"sources":["logo.svg","Monstralia.png","background.svg","App.js","serviceWorker.js","SlideView.js","PageContainer.js","index.js"],"names":["module","exports","App","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","then","response","contentType","get","status","indexOf","serviceWorker","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","message","SlideView","Div","styled","div","attrs","props","SlideStyle","Slide","Arrow","Icon","img","Dots","ul","settings","appendDots","dots","customPaging","i","src","getImg","accessibility","slide","speed","slidesToShow","slidesToScroll","touchThreshold","focusOnSelect","centerPadding","centerMode","initialSlide","infinite","dotsClass","arrows","prevArrow","nextArrow","map","React","Component","imgs","Monstralia","Page","Text","p","index","data-index","key","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5d410d88.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/Monstralia.59a4e8d6.png\";","module.exports = __webpack_public_path__ + \"static/media/background.88f5c281.svg\";","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {React, styled, Slider, map, getImg} from './Library';\r\n\r\nexport default class SlideView extends React.Component {\r\n    render() {    \r\n        const Div = styled.div.attrs(props => ({}))`\r\n            *, *::before, *::after{\r\n                margin: 0px;\r\n                padding: 0px;\r\n                outline: none;\r\n            }\r\n            --slate: #333;\r\n        `\r\n        const SlideStyle = styled(Div)`\r\n            top: calc(50% - 80vh/2);\r\n            left: calc(50% - 80vw/2);\r\n            position: absolute;\r\n            /* background: salmon; */\r\n            display: block;\r\n            height: 80vh;\r\n            width: 80vw;\r\n            padding: 0;\r\n        `;\r\n        const Slide = styled(Div)``\r\n        const Arrow = styled(Div)`\r\n            position: fixed;\r\n            height: 10%;\r\n            width: 5%;\r\n            top: 50%;\r\n            ::before {\r\n                font-size: 12vmin;\r\n                line-height: 15%;\r\n                position: fixed;\r\n                color: silver;\r\n                top: 50%;\r\n            };\r\n            &.slick-prev {\r\n                left: 1vmin;\r\n                ::before {\r\n                    left: 0;\r\n                }\r\n            };\r\n            &.slick-next {\r\n                right: 1vmin;\r\n                ::before {\r\n                    right: 0;\r\n                }\r\n            };\r\n            :hover::before {\r\n                opacity: 1;\r\n            };\r\n        `;\r\n        const Icon = styled.img`\r\n            display: inline-block;\r\n            background: white;\r\n            padding: 0px;\r\n            margin: 0px;\r\n            position: relative;\r\n            /* left: -.85vw; */\r\n            /* width: 80%; */\r\n            top: 1vmin;\r\n            height: 8vmin;\r\n            border-radius: 20%;\r\n            box-shadow: 0px 0px 1vmin var(--slate);\r\n            filter: grayscale(1) invert(.3) opacity(.8) brightness(1.5);\r\n            :hover{\r\n                /* width: 2.5vw; */\r\n                /* transform: translate(-50%, -50%); */\r\n                /* filter: grayscale(0) invert(0); */\r\n                filter: opacity(1);\r\n            };\r\n            /* border: solid black; */\r\n        `\r\n        const Dots = styled.ul`\r\n            margin: 0px;\r\n            padding: 0px;\r\n            position: fixed;\r\n            left: 0;\r\n            top: 2vmin;\r\n            width: 100vw;\r\n            height: 10vmin;\r\n            /* top: 50%; */\r\n            /* left: calc(50% - 25%/2); */\r\n            /* background: red; */\r\n            display: flex;\r\n            justify-content: center;\r\n            vertical-align: middle;\r\n            /* transform: translate(-50%, -50%); */\r\n            & > li {\r\n                /* background: yellow; */\r\n                height: 10vmin;\r\n                width: 10vmin;\r\n                margin: 1vmin, 0px, 1, 0px;\r\n                /* top: 12.5%; */\r\n                position: relative;\r\n                display: inline-block;\r\n                /* display: inline-block; */\r\n                /* vertical-align: middle;   */\r\n            }\r\n            & > .slick-active{\r\n                /* top: 3.5%; */\r\n            }\r\n            & > .slick-active > ${Icon}{\r\n                /* left: -1.1vw; */\r\n                /* width: 100%; */\r\n                height: 10vmin;\r\n                top: 0vmin;\r\n                filter: opacity(1);\r\n            };\r\n        `\r\n        const settings = {\r\n            appendDots: dots => (\r\n                <Dots>{dots}</Dots>\r\n            ),\r\n            customPaging: i => (\r\n                <Icon src={getImg(i)}/>\r\n            ),\r\n            accessibility: true,\r\n            slide: <Slide/>,\r\n            speed: 750,\r\n            slidesToShow: 1,\r\n            slidesToScroll: 1,\r\n            touchThreshold: 10,\r\n            focusOnSelect: true,\r\n            centerPadding: '0px',\r\n            centerMode: true,\r\n            initialSlide: 1,\r\n            infinite: true,\r\n            dots: true,\r\n            dotsClass: \"slick-dots\",\r\n            arrows: true,\r\n            prevArrow: <Arrow/>,\r\n            nextArrow: <Arrow/>,\r\n        }\r\n        return (\r\n            <SlideStyle>\r\n                <Slider {...settings}>{map}</Slider>\r\n            </SlideStyle>\r\n        )\r\n    }\r\n}","import {React, styled} from './Library';\r\nimport Monstralia from './Monstralia.png'\r\n\r\nconst pages = [\r\n    \"Bio\",\r\n    \"Home\",\r\n    \"Monstralia\",\r\n    \"RogueLike One\",\r\n    \"Suit Yourself\"\r\n];\r\n\r\nconst imgs = [\r\n    'https://drive.google.com/uc?id=1geiV1riN3qDFYC35GbTL-GwaU7_hCsVb',\r\n    'https://drive.google.com/uc?id=15hsdngexVWnj4--NCo8sxP2mNjxUsaHs',\r\n    Monstralia,\r\n    'https://drive.google.com/uc?id=1OjAS9WPTfNU7MuUmkvynY2OXSxChMUkb',\r\n    'https://drive.google.com/uc?id=1znvxnh14Ck4xeOX7nLkUfk1dtZnSagdb',\r\n];\r\n\r\nfunction getImg(i){\r\n    const img = imgs[i];\r\n    return(img)\r\n}\r\n\r\nconst Page = styled.div`\r\n    display: block;\r\n    /* height: 80vh; */\r\n    height: 80vh;\r\n    /* background: silver; */\r\n`;\r\n\r\nconst Text = styled.div`\r\n    display: flex; \r\n    height: 100%;\r\n    /* border: solid black; */\r\n    justify-content: center;\r\n    align-items: center;\r\n    font-weight: bold;\r\n    font-size: 12vmin;\r\n    color: #555;\r\n`\r\n\r\nconst map = pages.map(\r\n    (p, index) => \r\n    <Page \r\n        data-index={index}\r\n        key={index}>\r\n            <Text>\r\n                {p}\r\n            </Text>\r\n    </Page>\r\n);\r\n\r\nexport {map, getImg};\r\n","import{React, ReactDOM, App, serviceWorker, SlideView, styled} from './Library';\r\nimport './index.css';\r\nimport \"slick-carousel/slick/slick.css\";\r\nimport \"slick-carousel/slick/slick-theme.css\";\r\nimport background from './background.svg';\r\n\r\n// function Background(){\r\n//   const Style = styled.img`\r\n//     /* width: 100%; */\r\n//     filter: opacity(10%);\r\n//     background-repeat: repeat;\r\n//   `\r\n//   return(\r\n//     <Style src={background}/>\r\n//   )\r\n// }\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    {/* <App /> */}\r\n    {/* <Background/> */}\r\n    <SlideView/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}